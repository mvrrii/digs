import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from transformers import AutoModelForSequenceClassification, AutoTokenizer, Trainer, TrainingArguments
import torch
from datasets import Dataset
import evaluate

class BDSSentimentClassifier:
    def __init__(self, model_name='distilbert-base-uncased', num_labels=3):
        """
        Initialize the sentiment classification model
        
        Args:
            model_name (str): Pretrained transformer model to use
            num_labels (int): Number of sentiment categories
        """
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForSequenceClassification.from_pretrained(
            model_name, 
            num_labels=num_labels
        )
        self.label_encoder = LabelEncoder()
    
    def preprocess_data(self, dataframe, text_column, label_column):
        """
        Preprocess the dataset for model training
        
        Args:
            dataframe (pd.DataFrame): Input dataframe
            text_column (str): Column containing comment text
            label_column (str): Column containing sentiment labels
        
        Returns:
            dict: Preprocessed dataset for Hugging Face
        """
        # Encode labels
        labels = self.label_encoder.fit_transform(dataframe[label_column])
        
        # Tokenize texts
        encodings = self.tokenizer(
            dataframe[text_column].tolist(), 
            truncation=True, 
            padding=True, 
            max_length=512
        )
        
        # Create dataset
        dataset = Dataset.from_dict({
            'input_ids': encodings['input_ids'],
            'attention_mask': encodings['attention_mask'],
            'labels': labels
        })
        
        return dataset
    
    def compute_metrics(self, eval_pred):
        """
        Compute evaluation metrics
        
        Args:
            eval_pred: Prediction from the model
        
        Returns:
            dict: Evaluation metrics
        """
        metric = evaluate.load("accuracy")
        logits, labels = eval_pred
        predictions = np.argmax(logits, axis=-1)
        return metric.compute(predictions=predictions, references=labels)
    
    def train_model(self, train_dataset, eval_dataset=None, output_dir='bds_sentiment_model'):
        """
        Train the sentiment classification model
        
        Args:
            train_dataset: Training dataset
            eval_dataset: Optional evaluation dataset
            output_dir (str): Directory to save the model
        """
        training_args = TrainingArguments(
            output_dir=output_dir,
            num_train_epochs=3,
            per_device_train_batch_size=8,
            per_device_eval_batch_size=16,
            warmup_steps=500,
            weight_decay=0.01,
            logging_dir='logs',
            logging_steps=10,
            evaluation_strategy="epoch"
        )
        
        trainer = Trainer(
            model=self.model,
            args=training_args,
            train_dataset=train_dataset,
            eval_dataset=eval_dataset,
            compute_metrics=self.compute_metrics
        )
        
        # Train the model
        trainer.train()
        
        # Save the model and tokenizer
        trainer.save_model(output_dir)
        self.tokenizer.save_pretrained(output_dir)
    
    def push_to_huggingface(self, 
                             repository_name, 
                             username, 
                             commit_message='Add BDS Sentiment Analysis Model'):
        """
        Push the trained model to Hugging Face
        
        Args:
            repository_name (str): Name of the repository
            username (str): Hugging Face username
            commit_message (str): Commit message for the upload
        """
        from huggingface_hub import HfApi
        
        api = HfApi()
        api.upload_folder(
            folder_path=f'bds_sentiment_model',
            repo_id=f'{username}/{repository_name}',
            repo_type='model',
            commit_message=commit_message
        )

def main():
    # Load your dataset
    df = pd.read_csv('bds_comments.csv')
    
    # Split the data
    train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)
    
    # Initialize the classifier
    classifier = BDSSentimentClassifier()
    
    # Preprocess datasets
    train_dataset = classifier.preprocess_data(
        train_df, 
        text_column='Comment', 
        label_column='Sentiment'
    )
    
    test_dataset = classifier.preprocess_data(
        test_df, 
        text_column='Comment', 
        label_column='Sentiment'
    )
    
    # Train the model
    classifier.train_model(
        train_dataset, 
        eval_dataset=test_dataset
    )
    
    # Optional: Push to Hugging Face
    # Uncomment and replace with your details
    # classifier.push_to_huggingface(
    #     repository_name='bds-sentiment-analysis',
    #     username='your_huggingface_username'
    # )

if __name__ == "__main__":
    main()
